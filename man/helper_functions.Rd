% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_functions.R
\docType{data}
\name{checkForPyModules}
\alias{checkForPyModules}
\alias{generateContext}
\alias{helper_functions}
\alias{gg_color_hue}
\alias{list}
\alias{get_values_from_list}
\alias{toVerticalMatrix}
\alias{reset_parallize}
\alias{get_sliding_window_data}
\alias{merge_data_chunks}
\alias{get_noise_sig}
\alias{get_signatures_for_current_sample}
\alias{save_data}
\alias{toHorizontalMatrix}
\alias{gather_statistics}
\alias{extract_data_for_example}
\alias{extract_data_for_simulation}
\alias{extract_bootstrap_data_for_example}
\alias{gather_summaries_per_tissue}
\alias{add_noise}
\alias{convert_window_to_indices}
\alias{find_indices_with_intersection}
\alias{read_mixtures}
\alias{get_examples_group}
\alias{compute_mean_sd_err}
\alias{get_bootstrap_mixtures}
\alias{add_list_by_element}
\alias{not_na}
\alias{truncate_to_range}
\alias{get_sample_purity}
\alias{merge_signatures}
\alias{extract_exposures_per_mutation}
\alias{load_annotation}
\alias{load_annotation_pcawg}
\title{\code{checkForPyModules} Check that the python used by reticulate has access to the required module dependancies for TrackSig to function}
\format{An object of class \code{result} of length 1.}
\usage{
checkForPyModules()

generateContext(alphabet)

gg_color_hue(n)

list

get_values_from_list(list, name_of_value, FUN = NULL, default = NULL,
  concat_function = "cbind")

toVerticalMatrix(L)

reset_parallize()

get_sliding_window_data(data, shift, gap = 1)

merge_data_chunks(vcfData)

get_noise_sig(noise_sig)

get_signatures_for_current_sample(id, active_signatures.our_samples, alex,
  noise_sig)

save_data()

toHorizontalMatrix(L)

gather_statistics(mixtures, changepoints, tumor_id, dir_name, tumor_type,
  mixtures.rescaled = NULL)

extract_data_for_example(example, dir_counts, tumortypes,
  dir_results = TrackSig.options()$DIR_RESULTS, dir_create = T)

extract_data_for_simulation(example, dir_counts,
  dir_results = DIR_RESULTS, dir_create = T)

extract_bootstrap_data_for_example(example, bootstrap_counts)

gather_summaries_per_tissue(omit_signature_information = F)

add_noise(vcfData, noise_rate = 0.05)

convert_window_to_indices(total_length, window_size, gap)

find_indices_with_intersection(covered_by_changepoints,
  intervals_for_change_histogram)

read_mixtures(m_file)

get_examples_group(list_,
  EXAMPLES_PER_GROUP = TrackSig.options()$EXAMPLES_PER_GROUP,
  group = TrackSig.options()$group)

compute_mean_sd_err(mixtures_bootstrap, sig_names, dir_name = NULL,
  descr = "", exclude_zero = F)

get_bootstrap_mixtures(bootstrap_vcfs, bootstrap_phis, alex.t, dir_name,
  descr, verbose = TRUE)

add_list_by_element(list_total_sum, list_to_add)

not_na(x)

truncate_to_range(mixtures, range_)

get_sample_purity(tumor_id)

merge_signatures(mixtures, sigs_to_merge)

extract_exposures_per_mutation(activities_dir, sorted_mutations_dir,
  bin_size = 100, samples_to_run = c())

load_annotation(tumortype_file = TrackSig.options()$tumortype_file,
  signature_file = TrackSig.options()$signature_file,
  active_signatures_file = TrackSig.options()$active_signatures_file)


  load_annotation_pcawg(tumortype_file = TrackSig.options()$tumortype_file,
  signature_file = TrackSig.options()$signature_file,
  active_signatures_file = TrackSig.options()$active_signatures_file)
}
\arguments{
\item{alphabet}{list of pairs of characters to create combinations of as a mutation context type}
}
\value{
None

data.frame containing all the possible trinucleotide contextes for a mutation in the supplied alphabet
}
\description{
Non-exported functions called by \code{TrackSig} functions. \cr
Not intended for end-user use.
}
\examples{
context <- TrackSig:::generateContext(c("CG", "TA"))
dim(context)
head(context)

}
\keyword{datasets}
